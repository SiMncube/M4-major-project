using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace M4_major_project
{
    public partial class AdminRegister : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            setUser.InnerText = currentAdminName();
        }
        private string currentAdminName()
        {
            FullDataSet fullDs = new FullDataSet();
            FullDataSetTableAdapters.StaffTableAdapter taStaff = new FullDataSetTableAdapters.StaffTableAdapter();
            taStaff.Fill(fullDs.Staff);
            for (int i = 0; i < fullDs.Staff.Rows.Count; i++)
            {
                if (fullDs.Staff[i].emailID.Equals(CurrentUser.getEmailID(), StringComparison.OrdinalIgnoreCase))
                    return fullDs.Staff[i].surname + " " + fullDs.Staff[i].name;
            }
            return "";
        }
        protected void Button1_Click(object sender, EventArgs e)
        {
            colorBoxes();
            FullDataSet fullDs = new FullDataSet();
            FullDataSetTableAdapters.CustomerTableAdapter taCustomer = new FullDataSetTableAdapters.CustomerTableAdapter();
            taCustomer.Fill(fullDs.Customer);
            if (isValid())
            {
                string temp = generatePassword();
                Email.sendEmail(emailTextBox.Text,"Welcome to the Cottage BnB",htmlWelcome(temp));
                taCustomer.Insert(capFirst(emailTextBox.Text), capFirst(nameTextBox.Text), capFirst(surnameTextBox.Text), idTextBox.Text, cellTextBox.Text, temp, capFirst(streetTextBox.Text), capFirst(surbubNameTextBox.Text), capFirst(cityTextBox.Text), postalTextBox.Text);
                modalBody.InnerHtml = "<p>The Customer has been registered<br/>A confirmation email has been sent vie email to the customer";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
            }
        }
        private string capFirst(string s)
        {
            return (s[0] + "").ToUpper() + s.Substring(1).ToLower();
        }
        private string htmlOTP(string temp)
        {
            string body = @"<html>
                           <body>";
            body += "<p>Dear " + nameTextBox.Text + ",</p><p>We're happy you signed up for The Cottage BNB. To start making bookings on the cottage booking app, Please confirm your email address</p>";
            body += "<p>Here's your One Time Pin(OTP) : <strong>" + temp + "</strong></p>";
            body += "<p>This is an autogenerated email, for enquiries<br>call: +27 64 090 3388<br>Or email: sonya@TheCottageBnB.co.za</p>";
            body += " </body></html>";
            return body;
        }
        public string randomOTP()
        {
            Random r = new Random();
            int randNum = r.Next(1000000);
            string temp = randNum.ToString("D6");
            string random = null;
            for (int i = 0; i < 6; i++)
                random += temp[i] + " ";

            return random.Substring(0, 11);
        }
        private bool isDigit(char ch)
        {
            if (ch >= '0' && ch <= '9')
                return true;
            return false;
        }
        private bool isAllDigit(string s)
        {
            for (int i = 0; i < s.Length; i++)
            {
                if (!isDigit(s[i]))
                    return false;
            }
            return true;
        }
        private bool isLetter(char c)
        {
            if (c >= 'a' && c <= 'z')
                return true;
            return false;
        }
        private bool isAllLetters(string s)
        {
            s = s.ToLower();
            for (int i = 0; i < s.Length; i++)
            {
                if (!isLetter(s[i]))
                    return false;
            }
            return true;
        }
        private bool nameIsValid()
        {
            int count = 0;
            if (!isAllLetters(nameTextBox.Text) || nameTextBox.Text.Length < 3)
            {
                modalBody.InnerHtml = "<p>The name is invalid</p>";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
                nameTextBox.ForeColor = System.Drawing.Color.White;
                nameTextBox.BackColor = System.Drawing.Color.Red;
                count++;
            }
            if (!isAllLetters(surnameTextBox.Text) || surnameTextBox.Text.Length < 3)
            {
                surnameTextBox.BackColor = System.Drawing.Color.Red;
                count++;
            }
            return count == 0;
        }
        private bool AddrressIsValid()
        {
            if (!isAllDigit(postalTextBox.Text) || postalTextBox.Text.Length != 4)
            {
                modalBody.InnerHtml = "<p>The postal code entered is invalid. Postal code should be 4-Digits long</p>";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
                postalTextBox.BackColor = System.Drawing.Color.Red;
                postalTextBox.ForeColor = System.Drawing.Color.White;
                return false;
            }
            return true;
        }
        private bool IdIsValid()
        {
            if (!isAllDigit(idTextBox.Text) || idTextBox.Text.Length != 13)
            {
                modalBody.InnerHtml = "<p>The ID number entered is invalid. ID number should be 13-Digits long</p>";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
                idTextBox.BackColor = System.Drawing.Color.Red;
                idTextBox.ForeColor = System.Drawing.Color.White;
                return false;
            }
            return true;
        }
        private bool CellNumberisValid()
        {
            if (!isAllDigit(cellTextBox.Text) || cellTextBox.Text.Length != 10)
            {
                modalBody.InnerHtml = "<p>The cell number entered is invalid. Cell number is 10-Digits long</p>";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
                cellTextBox.BackColor = System.Drawing.Color.Red;
                cellTextBox.ForeColor = System.Drawing.Color.White;
                return false;
            }
            return true;
        }
        private bool isValid()
        {
            colorBoxes();
            int count = 0;
            if (!nameIsValid())
                count++;
            if (!AddrressIsValid())
                count++;
            if (!CellNumberisValid())
                count++;
            if (!IdIsValid())
                count++;
            if (!EmailISValid())
                count++;
            if (count > 1)
            {
                modalBody.InnerHtml = "<p>The details provided are not valid please try again</p>";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
            }
            return count == 0;
        }
        private bool EmailISValid()
        {
            if (!emailTextBox.Text.Equals(confirmEmailTextBox.Text))
            {
                modalBody.InnerHtml = "<p>The email address entered do not match</p>";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
                emailTextBox.BackColor = System.Drawing.Color.White;
                emailTextBox.BackColor = System.Drawing.Color.Red;
                confirmEmailTextBox.ForeColor = System.Drawing.Color.White;
                confirmEmailTextBox.BackColor = System.Drawing.Color.Red;
                return false;
            }
            if (emailTextBox.Text != null)
            {
                EmailAddressAttribute email = new EmailAddressAttribute();
                if (!email.IsValid(emailTextBox.Text) && emailTextBox.Text.Length > 2)
                {
                    emailTextBox.BackColor = System.Drawing.Color.White;
                    emailTextBox.BackColor = System.Drawing.Color.Red;
                    confirmEmailTextBox.ForeColor = System.Drawing.Color.White;
                    confirmEmailTextBox.BackColor = System.Drawing.Color.Red;
                    modalBody.InnerHtml = "<p>The email is invalid, Please enter a valid email</p>";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
                    return false;
                }
                else if (EmailIsRegistred())
                {
                    emailTextBox.ForeColor = System.Drawing.Color.White;
                    emailTextBox.BackColor = System.Drawing.Color.Red;
                    confirmEmailTextBox.ForeColor = System.Drawing.Color.White;
                    confirmEmailTextBox.BackColor = System.Drawing.Color.Red;
                    modalBody.InnerHtml = "<p>The email address is already registered</p>";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
                    return false;
                }
                return true;
            }
            return false;
        }
        private bool EmailIsRegistred()
        {
            FullDataSet fullDs = new FullDataSet();
            FullDataSetTableAdapters.CustomerTableAdapter taCustomer = new FullDataSetTableAdapters.CustomerTableAdapter();
            taCustomer.Fill(fullDs.Customer);
            for (int i = 0; i < fullDs.Customer.Rows.Count; i++)
            {
                if (fullDs.Customer[i].emailID.Equals(emailTextBox.Text, StringComparison.OrdinalIgnoreCase))
                    return true;
            }
            return false;
        }
        private void colorBoxes()
        {
            nameTextBox.BackColor = System.Drawing.Color.White;
            surnameTextBox.BackColor = System.Drawing.Color.White;
            idTextBox.BackColor = System.Drawing.Color.White;
            cellTextBox.BackColor = System.Drawing.Color.White;
            postalTextBox.BackColor = System.Drawing.Color.White;
            emailTextBox.BackColor = System.Drawing.Color.White;
            passwordTextBox.BackColor = System.Drawing.Color.White;
            confirmTextBox.BackColor = System.Drawing.Color.White;
        }
        protected void closeBtn_Click(object sender, EventArgs e)
        {
            Response.Redirect("/RegisterOTP");
        }

        protected void emailTextBox_TextChanged(object sender, EventArgs e)
        {
            emailTextBox.BackColor = System.Drawing.Color.White;
        }

        protected void nameTextBox_TextChanged(object sender, EventArgs e)
        {
            nameTextBox.BackColor = System.Drawing.Color.White;

        }
        private string htmlWelcome(string s)
        {
            string body = @"<html>
                           <body>";
            body += "<h1>Welcome to The Cottage BnB, " + nameTextBox.Text + "!</h1><p><strong>This email includes your account details, so please keep it safe.</strong></p><p>We’re thrilled to see you here!</p>";
            body += "<p>We’re confident that The Cottage BnB will give you an enjoyable and unforgettable experience everytime you visit.</p>";
            body += "<p>Here's your Auto generated password :  <strong>" + s + "</strong><br>You can now login and change you password.</p>";
            body += "<p>Take care!</p>";
            body += "<p>This is an autogenerated email, for enquiries<br>call: +27 64 090 3388<br>Or email: sonya@TheCottageBnB.co.za</p>";
            body += " </body></html>";
            return body;
        }
        private string generatePassword()
        {
            StringBuilder builder = new StringBuilder();
            Random random = new Random();
            char ch;
            for (int i = 0; i < 8; i++)
            {
                ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));
                builder.Append(ch);
            }
            return builder.ToString();
        }
    }
}